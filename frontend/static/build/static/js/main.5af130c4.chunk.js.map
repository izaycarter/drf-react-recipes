{"version":3,"sources":["components/CreateRecipes.js","components/Login.js","components/StartPage.js","components/Header.js","components/Footer.js","components/BaseLayout.js","serviceWorker.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","CreateRecipes","props","state","title","image","preview","recipes","handleChange","bind","handleImageChange","handleSubmit","e","this","setState","target","name","value","file","files","reader","FileReader","onloadend","result","readAsDataURL","preventDefault","formData","FormData","append","post","headers","then","res","push","data","catch","error","console","log","get","map","recipe","key","id","src","alt","Fragment","onSubmit","type","onChange","Component","Login","username","email","password","localStorage","setItem","history","htmlFor","placeholder","required","StartPage","Header","href","Footer","BaseLayout","children","Boolean","window","location","hostname","match","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5af130c4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = \"csrftoken\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nclass CreateRecipes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title:\"\",\n            image: null,\n            preview: null,\n            recipes: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleImageChange = this.handleImageChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e){\n        // [] allows you to not hard code title\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleImageChange(e){\n        let file = e.target.files[0]\n        // the way not using []\n        this.setState({image: file});\n\n        // optional visual for users\n        let reader = new FileReader();\n\n        reader.onloadend = () => {\n            this.setState({preview: reader.result});\n        };\n\n        // asynconios\n        reader.readAsDataURL(file);\n\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n\n        let formData = new FormData();\n        formData.append(\"title\", this.state.title);\n        formData.append(\"image\", this.state.image);\n\n\n        axios.post(\"/api/v1/recipes/\", formData, {\n            headers: {\n                \"content-type\": \"multipart/form-data\"\n            }\n        })\n        .then(res => {\n            let recipes = [...this.state.recipes];\n            recipes.push(res.data);\n\n            this.setState({recipes: recipes, title: \"\", preview: null, image: null});\n        })\n        .catch(error => {\n            console.log(error)\n        });\n    }\n\n    componentDidMount(){\n        axios.get(\"/api/v1/recipes/\")\n        .then(res =>{\n            this.setState({recipes: res.data});\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    }\n\n    render(){\n        let recipes = this.state.recipes.map(recipe => (\n            <li key={recipe.id}>\n                <p>{recipe.title}</p>\n                <img src={recipe.image} alt=\"\"/>\n            </li>\n        ))\n        return(\n            <React.Fragment>\n                <form onSubmit={this.handleSubmit}>\n                    <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.handleChange}/>\n                    <input type=\"file\" name=\"image\" onChange={this.handleImageChange}/>\n\n                    {this.state.image ? (\n                        <img src={this.state.preview} alt=\"preview\"/>\n                    ) : (\n                        null\n                    )}\n\n                    <button>Upload</button>\n                </form>\n                <ul>{recipes}</ul>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default CreateRecipes;\n","import React, {Component} from 'react';\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password: ''\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    axios.post('/api/v1/rest-auth/login/', this.state)\n    .then(res => {\n        localStorage.setItem('my-app-token', res.data.key);\n        this.props.history.push('/');\n    })\n    .catch(error => {\n        console.log(error);\n    });\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  render() {\n      console.log(this.props)\n    return  (\n      <form onSubmit={this.handleSubmit}>\n        <p>\n          <label htmlFor=\"username\">Username</label>\n          <input id='username' type='text' name='username' value={this.state.username} onChange={this.handleChange} placeholder='Enter username' required />\n        </p>\n        <p>\n          <label htmlFor=\"email\">Email</label>\n          <input id='email' type='email' name='email' value={this.state.email} onChange={this.handleChange} placeholder='Enter email' required />\n        </p>\n        <p>\n          <label htmlFor=\"password\">Password</label>\n          <input id='password' type='password' name='password' value={this.state.password} onChange={this.handleChange} placeholder='Enter password' required/>\n        </p>\n        <button>Login</button>\n      </form>\n    )\n  }\n}\n\nexport default Login;\n","import React from 'react';\n\n\nfunction StartPage() {\n  return (\n    <div >StartPage Page</div>\n  );\n}\n\nexport default StartPage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {NavLink} from \"react-router-dom\";\n\n\nfunction Header() {\n  return (\n    <header >\n        <a href=\"login/\">Login</a>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\n\nfunction Footer() {\n  return (\n    <div >Footer Page</div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\n\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nfunction BaseLayout(props) {\n  return (\n    <div >\n        <Header />\n        {props.children}\n        <Footer />\n    </div>\n  );\n}\n\nexport default BaseLayout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CreateRecipes from \"./components/CreateRecipes\";\nimport Login from './components/Login';\nimport StartPage from \"./components/StartPage\";\nimport BaseLayout from \"./components/BaseLayout\";\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <BaseLayout>\n            <Switch>\n                <Route path='/login/' component={Login}/>\n                <Route path=\"/recipes/new/\" component={CreateRecipes}/>\n                <Route exact path=\"/\" component={StartPage}/>\n            </Switch>\n        </BaseLayout>\n    </Router>\n, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}